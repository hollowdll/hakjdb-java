// HakjDB gRPC API
// API version: 1.2.0
//
// This package contains Protobuf definitions related to the server.

syntax = "proto3";
package api.v1.serverpb;

option java_package = "com.github.hakjdb.hakjdbjava.api.v1.serverpb";

// MemoryInfo represents information about memory consumption.
message MemoryInfo {
  // Allocated memory.
  uint64 memory_alloc = 1;
  // Total allocated memory.
  uint64 memory_total_alloc = 2;
  // Memory obtained from OS.
  uint64 memory_sys = 3;
}

// StorageInfo represents information about data storage.
message StorageInfo {
  // Total amount of stored data in bytes.
  uint64 total_data_size = 1;
  // Total number of keys stored on the server.
  uint64 total_keys = 2;
}

// ClientInfo represents information about client connections.
message ClientInfo {
  // Number of active client connections.
  uint32 client_connections = 1;
  // Maximum number of client connections allowed.
  uint32 max_client_connections = 2;
}

// DatabaseInfo represents information about databases.
message DatabaseInfo {
  // Number of databases.
  uint32 db_count = 1;
  // Default database that the server uses.
  string default_db = 2;
}

// GeneralInfo represents general information about the server.
message GeneralInfo {
  // Version of the server.
  string server_version = 1;
  // Version of Go used to compile the server.
  string go_version = 2;
  // Server operating system.
  string os = 3;
  // Architecture which can be 32 or 64 bits.
  string arch = 4;
  // PID of the server process.
  uint32 process_id = 5;
  // Server process uptime in seconds.
  uint64 uptime_seconds = 6;
  // Server TCP/IP port.
  uint32 tcp_port = 7;
  // True if TLS is enabled.
  bool tls_enabled = 8;
  // True if authentication is enabled.
  bool auth_enabled = 9;
  // True if the log file is enabled.
  bool logfile_enabled = 10;
  // True if debug mode is enabled.
  bool debug_enabled = 11;
  // Version of the API.
  string api_version = 12;
  // True if TLS client certificate authentication is enabled.
  bool tls_client_cert_auth_enabled = 13;
}

message GetServerInfoRequest {}

message GetServerInfoResponse {
  GeneralInfo general_info = 1;
  MemoryInfo memory_info = 2;
  StorageInfo storage_info = 3;
  ClientInfo client_info = 4;
  DatabaseInfo db_info = 5;
}

message GetLogsRequest {}

message GetLogsResponse {
  // List of returned logs.
  repeated string logs = 1;
}

message ReloadConfigRequest {}

message ReloadConfigResponse {}

// ServerService provides RPCs related to the server.
service ServerService {
  // GetServerInfo returns information about the server.
  rpc GetServerInfo(GetServerInfoRequest) returns (GetServerInfoResponse) {}

  // GetLogs returns the server logs if the log file is enabled.
  rpc GetLogs(GetLogsRequest) returns (GetLogsResponse) {}

  // ReloadConfig reloads the server configurations.
  // Not all configurations can be reloaded at runtime.
  rpc ReloadConfig(ReloadConfigRequest) returns (ReloadConfigResponse) {}
}